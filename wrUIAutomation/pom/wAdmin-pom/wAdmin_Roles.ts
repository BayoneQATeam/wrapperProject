import { CommonLib } from "../commonLib"
import { Page } from "@playwright/test"
import { expect } from "@playwright/test"

export class wAdmin_Roles extends CommonLib {
    constructor(page: Page) {
        super(page)
    }
    commonLib = new CommonLib(this._page)
    async validateAdminRolespage(): Promise<void>{
       await this._page.locator("//p[@data-rt-header-role='rolebtn']").click();
       await this.explicitWait(1000);
       await expect(this._page.locator("button:has-text('Create Role')")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("button:has-text('Refresh List')")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('All (')")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('My (')")).toBeVisible();
       await this.explicitWait(1000);
       await this._page.locator("//button[@data-rt-role-addnew=' addnewrole']").click();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Creating a New Role')")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Please select how you would like to add the new role from the options below.')")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Use Existing Role Type')")).toBeVisible();
       await this.explicitWait(1000);
       await this._page.locator("p:has-text('Use Existing Role Type')").click();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('New Role - Details')")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("//p[.='Hiring Role Information']")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Role Type') >> nth =1")).toBeVisible();
       await this.explicitWait(1000);
       await this._page.locator("div:has-text('Choose one option') >> nth =10").click();
       await this.explicitWait(1000);
       await this._page.locator("li[data-value='Mobile Developer']").click();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Role Category')")).toBeVisible();
       await this.explicitWait(1000);
       await this._page.locator("div:has-text('Choose one option') >> nth =11").click();
       await this.explicitWait(1000);
       await expect(this._page.locator("//li[@data-value='Engineering / Development']")).toBeVisible();
       await this.explicitWait(1000);
       await this._page.locator("//li[@data-value='Engineering / Development']").click();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Required Degree')")).toBeVisible();
       await this.explicitWait(1000);
       await this._page.locator("div:has-text('Choose one option') >> nth =12").click();
       await this.explicitWait(1000);
       await this._page.locator("//li[@data-value='Bachelors']").click();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Years of Experience')")).toBeVisible();
       await this.explicitWait(1000);
       await this._page.locator("(//div[@aria-haspopup='listbox'])[position()=4]").click();
       await this.explicitWait(1000);
       await this._page.locator("//li[@tabindex='0']").click();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Coding Language')")).toBeVisible();
       await this.explicitWait(1000);
       await this._page.locator("(//div[@aria-haspopup='listbox'])[position()=5]").click();
       await this.explicitWait(1000);
       await this._page.locator("//li[@tabindex='0']").click();
       await this.explicitWait(1000);
       await expect(this._page.locator("//button[@data-rt-role-add='Continue']")).toBeVisible();
       await this.explicitWait(1000);
       await this._page.locator("//button[@data-rt-role-add='Continue']").click();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Required Skills')")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Select between 1 to 5. Recommended skills are automatically pre-selected based on the role information')")).toBeVisible();
       await this.explicitWait(1000);
       for(let i=0; i<=33;i++){
       await expect(this._page.locator('p[variant2="b2Regular"] >> nth=' +i)).toBeVisible();
      
       }
       await this.explicitWait(1000);
       await this._page.locator("p:has-text('Git')").click();
       await this._page.locator('button[data-rt-role-add="Continue"]').click();
       await this.explicitWait(2000);
       await expect(this._page.locator("p:has-text('Skill Weightage')")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Adjust the percentage of each skill to be tested, minimum of 10%. All values must add to 100%')")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Java') >>nth=2")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("div[aria-haspopup='listbox'] >>nth=0")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Mobile development concepts') >>nth=1")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("div[aria-haspopup='listbox'] >>nth=1")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Total')")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("button[data-rt-role-add='Continue']")).toBeVisible();
       await this.explicitWait(1000);
       await this._page.locator("div[aria-haspopup='listbox'] >>nth=0").click();
       await this.explicitWait(1000);
       await this._page.locator("li[data-value='50']").click();
       await this.explicitWait(1000);
       await this._page.locator("div[aria-haspopup='listbox'] >>nth=1").click();
       await this.explicitWait(1000);
       await this._page.locator("li[data-value='50']").click();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('100%') >>nth=1")).toBeVisible();
       await this.explicitWait(1000);
       await this._page.locator("button[data-rt-role-add='Continue']").click();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Testing Sections')")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Select the sections required for this role. If override is permitted, recruiter can make adjustments to each invites.')")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("span[class='MuiSwitch-track css-1ju1kxc']")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Override Permitted')")).toBeVisible();
       await this.explicitWait(1000);
       for(let j=0;j<=3;j++){
        await expect(this._page.locator("p[variant2='b2Regular'] >>nth=" +j)).toBeVisible();
        await this.explicitWait(1000);
        await this._page.locator("p[variant2='b2Regular'] >>nth=" +j).click();
        await this.explicitWait(1000);
       }
       await expect(this._page.locator("button[data-rt-role-add='Continue']")).toBeVisible();
       await this.explicitWait(1000);
       await this._page.locator("button[data-rt-role-add='Continue']").click();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Name & Notes')")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Give a name to this role and add optional notes for the internal recruitment team')")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("p:has-text('Enter Role Name')")).toBeVisible();
       await this.explicitWait(1000);
       await expect(this._page.locator("input[id='rolename']")).toBeVisible();
       await this.explicitWait(2000);
       await this._page.locator("input[id='rolename']").type("MOBILE DEVELOPER");
       await this.explicitWait(2000);
       await expect(this._page.locator("p:has-text('Internal Notes (optional)')")).toBeVisible();
       await this.explicitWait(2000);
       await expect(this._page.locator("textarea[id='textAreaValue']")).toBeVisible();
       await this.explicitWait(2000);
       await expect(this._page.locator("button[data-rt-role-add='ContinuetoReview']")).toBeVisible();
       await this.explicitWait(1000);
       await this._page.locator("button[data-rt-role-add='ContinuetoReview']").click();
       await this.explicitWait(2000);
       await expect(this._page.locator("p:has-text('Back')")).toBeVisible();
       await expect(this._page.locator("p:has-text('Role Summary')")).toBeVisible();
       await expect(this._page.locator("div[class='MuiGrid-root css-rfnosa'] >>nth=4")).toBeVisible();
       await expect(this._page.locator("p:has-text('Role Category')")).toBeVisible();
       await expect(this._page.locator("p:has-text('Engineering / Development')")).toBeVisible();
       await expect(this._page.locator("p:has-text('Role Name')")).toBeVisible();
       await expect(this._page.locator("p:has-text('MOBILE DEVELOPER')")).toBeVisible();
       await expect(this._page.locator("p:has-text('Bachelors')")).toBeVisible();
       await expect(this._page.locator("p:has-text('Years of Experience')")).toBeVisible();
       await expect(this._page.locator("p:has-text('1')")).toBeVisible();
       await expect(this._page.locator("p:has-text('Coding Language')")).toBeVisible();
       await expect(this._page.locator("p:has-text('Java') >>nth=0")).toBeVisible();
       await expect(this._page.locator("p:has-text('Internal Notes')")).toBeVisible();
       await expect(this._page.locator("p:has-text('None')")).toBeVisible();
       await expect(this._page.locator("p:has-text('Testing Requirements')")).toBeVisible();
       await expect(this._page.locator("p:has-text('Sections to Test')")).toBeVisible();
       await expect(this._page.locator("p:has-text('Profile')")).toBeVisible();
       await expect(this._page.locator("p:has-text('Technical')")).toBeVisible();
       await expect(this._page.locator("p:has-text('Coding') >>nth=1")).toBeVisible();
       await expect(this._page.locator("p:has-text('Presentation')")).toBeVisible();
       await expect(this._page.locator("p:has-text('Override Permitted')")).toBeVisible();
       await expect(this._page.locator("p:has-text('Yes')")).toBeVisible();
       await expect(this._page.locator("p:has-text('Skills to Test')")).toBeVisible();
       await expect(this._page.locator("p:has-text('Java') >>nth=0")).toBeVisible();
       await expect(this._page.locator("p:has-text('Mobile development concepts')")).toBeVisible();
       await expect(this._page.locator("p:has-text('Assigned Weight')")).toBeVisible();
       await expect(this._page.locator("button[data-rt-role-add='cancel']")).toBeVisible();
       await expect(this._page.locator("button[data-rt-recruiter-saverole='saverole']")).toBeVisible();
       await expect(this._page.locator("button[data-rt-role-add='PublishRole']")).toBeVisible();
       await this._page.locator("button[data-rt-role-add='PublishRole']").click();
       await this.explicitWait(4000);  
};
}